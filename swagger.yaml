swagger: "2.0"
info:
  version: 1.0.0
  title: "BOXwise Pro BOS REST API"
  description: | 
    The BOS REST API is the API used by BOXwise Pro to register, lookup offline scanners and uploading/downloading files.
    
    The API is secured using a simple API Key Request Authorization scheme. Make sure the API Token is injected in the Headers of each request.
    
    ```javascript
    const request = require('request-promise');
    
    ```
  termsOfService: http://app.boxwise.nl/api/terms/
  contact:
    name: Trancon bv 
    email: f.vandenhoek@trancon.nl
    url: https://www.trancon.nl
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: bos-httprest.boxwise.nl
basePath: /api
tags:
  - name: Licenses
    description: |
      Licenses refer to BOXwise Pro licenses. These are created here in order to register scanners to a license.
  - name: Files
    description: |
      Files refer to BOXwise Pro scanner files. These files are synced with the scanner.
  - name: Scanners
    description: |
      Scanners refer to BOXwise Pro (Offline) scanners.
schemes:
  - https
consumes:
  - application/json; charset=utf-8
produces:
  - application/json; charset=utf-8
securityDefinitions:
  ApiKeyAuthorization:
    type: apiKey
    name: Authorization
    description: The API can only be used when you authorize the request using an API Key Token.
    in: header
security:
  - ApiKeyAuthorization: []
paths:
  /licenses:
    get:
      description: |
        Returns all registered BOXwise Pro licenses.
      operationId: findLicenses
      tags:
        - Licenses
      parameters:
        - name: name
          in: query
          description: License name to filter on
          required: false
          type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
        - name: pagecursor
          in: query
          description: the next page starting from cursor
          required: false
          type: string
      responses:
        200:
          description: license response
          schema:
            $ref: '#/definitions/Licenses'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new license in the store.  Duplicates are not allowed.
      operationId: addLicense
      tags:
        - Licenses
      parameters:
        - name: license
          in: body
          description: License to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewLicense'
      responses:
        200:
          description: license response
          schema:
            $ref: '#/definitions/License'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Deletes an existing license in the store.
      operationId: deleteLicense
      tags:
        - Licenses
      parameters:
        - name: licenseid
          in: query
          description: License id of the license to delete from the store
          required: true
          type: string
      responses:
        204:
          description: license deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /licenses/{licenseid}/files:
    get:
      description: |
        List all files registered for this license id.
      operationId: findFiles
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: prefix
          in: query
          description: the prefix/folder to filter on
          required: false
          type: string
          default: "/"
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
        - name: pagecursor
          in: query
          description: the next page starting from cursor
          required: false
          type: string
      responses:
        200:
          description: files response
          schema:
            $ref: '#/definitions/Files'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /licenses/{licenseid}/files/submit:
    post:
      description: |
        Upload a new file
      operationId: uploadFile
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: file
          in: formData
          description: The uploaded file data
          required: true
          type: file
        - name: filename
          in: formData
          description: The name of the file
          required: true
          type: string
        - name: overwrite
          in: formData
          description: Overwriteif exists
          required: true
          type: boolean
          default: true
        - name: prefix
          in: formData
          description: The prefix/folder to upload file to
          required: false
          type: string
          default: "/"
      responses:
        200:
          description: files response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scanners:
    get:
      description: |
        Returns all scanners registered for this license id.
      operationId: findScanners
      tags:
        - Scanners
      parameters:
        - name: licenseid
          in: query
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
      responses:
        200:
          description: scanner response
          schema:
            type: array
            items:
              $ref: '#/definitions/Scanner'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new scanner in the store.  Duplicates are not allowed. The serial number is checked against all other serial numbers registered ignoring under which licenseid they are registered.
      operationId: addScanner
      tags:
        - Scanners
      parameters:
        - name: scanner
          in: body
          description: Scanner to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewScanner'
      responses:
        200:
          description: scanner response
          schema:
            $ref: '#/definitions/Scanner'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scanners/{serialno}:
    get:
      description: Returns a scanner based on the serial number.
      operationId: findScannerBySerialNo
      tags:
        - Scanners
      parameters:
        - name: serialno
          in: path
          description: Serial number of scanner to fetch
          required: true
          type: string
      responses:
        200:
          description: scanner response
          schema:
            $ref: '#/definitions/Scanner'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single scanner based on the serial number supplied.
      operationId: deleteScannerBySerialNo
      tags:
        - Scanners
      parameters:
        - name: serialno
          in: path
          description: Serial number of scanner to fetch
          required: true
          type: string
      responses:
        204:
          description: scanner deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  PagedResult:
    properties:
      nextcursor:
        type: string
  Licenses:
    allOf:
      - $ref: '#/definitions/PagedResult'
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/License'
    example:
      nextcursor: kwqjhekjeekwq32u4hfgde==
      result: 
        - name: "Customer X"
          licenseid: 112
          key: 324764278
        - name: "Customer Y"
          licenseid: 113
          key: 32474344278
  License:
    allOf:
      - $ref: '#/definitions/NewLicense'
    required:
      - key
    properties:
      key:
        type: string
    example:
      key: 3422423532
      licenseid: 122
      name: "Customer X"
  NewLicense:
    required:
      - licenseid
      - name
    properties:
      licenseid:
        type: string
      name:
        type: string
    example:
      licenseid: "122"
      name: "Customer X"
  Scanner:
    allOf:
      - $ref: '#/definitions/NewScanner'
    required  :
      - key
    properties:
      key:
        type: string
  NewScanner:
    required:
      - licenseid
      - serialno
      - name
    properties:
      licenseid:
        type: string
      serialno:
        type: string
      name:
        type: string
  Error:
    required:
      - statusCode
      - error
    properties:
      statusCode:
        type: integer
        format: int32
      error:
        type: string
      message:
        type: string
  Files:
    allOf:
      - $ref: '#/definitions/PagedResult'
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/File'
    example:
      nextcursor: kwqjhekjeekwq32u4hfgde==
      result: 
        - name: "meta.dat"
          size: 115
        - name: "prodidx.dat"
          size: 3343
  File:
    required:
      - name
      - size
    properties:
      name:
        type: string
      size:
        type: integer
        format: int64
      timeCreated:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
    example:
      name: "meta.dat"
      size: 115