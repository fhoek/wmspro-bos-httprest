swagger: "2.0"
info:
  version: 1.0.0
  title: "BOXwise Pro BOS REST API"
  description: | 
    The BOS REST API is the API used by BOXwise Pro to register, lookup offline scanners and uploading/downloading files.
    
    The API is secured using a simple API Key Request Authorization scheme. Make sure the API Token is injected in the Headers of each request.
    
    ```
    curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer <token>'
    ```
    
    For licenses (non-admin) using the API the security pattern is almost the same:

    ```
    curl -X GET --header 'Accept: application/json' --header 'Authorization: License <token>'
    ```
    
    Make sure token is base64 encoded string of `licenseid:apikey` combined.
  termsOfService: http://app.boxwise.nl/api/terms/
  contact:
    name: Trancon bv 
    email: f.vandenhoek@trancon.nl
    url: http://docs.boxwiseprobosrestapi.apiary.io
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: bos-httprest.app.boxwise.nl
basePath: /api
tags:
  - name: Licenses
    description: |
      Licenses refer to BOXwise Pro licenses. These are created here in order to register scanners to a license.
  - name: Files
    description: |
      Files refer to BOXwise Pro scanner files. These files are synced with the scanner.
  - name: Scanners
    description: |
      Scanners refer to BOXwise Pro (Offline) scanners.
  - name: AppVersions
    description: |
      Application Versions refer to BOXwise Pro (Offline) scanners application versions.
schemes:
  - https
consumes:
  - application/json; charset=utf-8
produces:
  - application/json; charset=utf-8
securityDefinitions:
  ApiKeyAuthorization:
    type: apiKey
    name: Authorization
    description: The API can only be used when you authorize the request using an API Key Token.
    in: header
  LicenseKeySecretAuthorization:
    type: apiKey
    name: Authorization
    description: API Key for specific license that scopes permissions to this license
    in: header
security:
  - ApiKeyAuthorization: []
paths:
  /licenses:
    get:
      description: |
        Returns all registered BOXwise Pro licenses.
      operationId: findLicenses
      tags:
        - Licenses
      parameters:
        - name: name
          in: query
          description: License name to filter on
          required: false
          type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
        - name: pagecursor
          in: query
          description: the next page starting from cursor
          required: false
          type: string
      responses:
        200:
          description: license response
          schema:
            $ref: '#/definitions/Licenses'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new license in the store if it does not already exist. Duplicates are not allowed. Returns an unauthorized API Key which can be used to perform subsequent requests (after it is approved).
      operationId: addLicense
      security: []
      tags:
        - Licenses
      parameters:
        - name: license
          in: body
          description: License to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewLicense'
      responses:
        200:
          description: license response
          schema:
            $ref: '#/definitions/LicenseWithSecret'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict/Already exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Edits an existing license in the store.
      operationId: editLicense
      tags:
        - Licenses
      parameters:
        - name: license
          in: body
          description: License to edit in the store
          required: true
          schema:
            $ref: '#/definitions/License'
      responses:
        200:
          description: license response
          schema:
            $ref: '#/definitions/License'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /licenses/{licenseid}:
    delete:
      description: Deletes an existing license in the store.
      operationId: deleteLicense
      tags:
        - Licenses
      parameters:
        - name: licenseid
          in: path
          description: License id of the license to delete from the store
          required: true
          type: string
      responses:
        204:
          description: license deleted
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /licenses/{licenseid}/appversion:
    get:
      description: Get the current app version for this license
      operationId: getLicenseAppVersion
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Licenses
      parameters:
        - name: licenseid
          in: path
          description: License id of the license to set app version for
          required: true
          type: string
      responses:
        200:
          description: license app version response
          schema:
            $ref: '#/definitions/LicenseAppVersion'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Set the app version for the license in the store.
      operationId: setLicenseAppVersion
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Licenses
      parameters:
        - name: licenseid
          in: path
          description: License id of the license to set app version for
          required: true
          type: string
        - name: appversion
          in: body
          description: App Version for this License
          required: true
          schema:
            $ref: '#/definitions/SetLicenseAppversion'
      responses:
        200:
          description: license app version set response
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{licenseid}:
    get:
      description: |
        List all files registered for this license id.
      operationId: findFiles
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: prefix
          in: query
          description: the prefix/folder to filter on
          required: false
          type: string
          default: "/"
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
      responses:
        200:
          description: files response
          schema:
            $ref: '#/definitions/Files'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{licenseid}/submit:
    post:
      description: |
        Upload a new file
      operationId: uploadFile
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: file
          in: formData
          description: The uploaded file data
          required: true
          type: file
        - name: filename
          in: formData
          description: The name of the file
          required: true
          type: string
        - name: overwrite
          in: formData
          description: Overwriteif exists
          required: true
          type: boolean
          default: true
        - name: prefix
          in: formData
          description: The prefix/folder to upload file to
          required: false
          type: string
          default: "/"
      responses:
        200:
          description: files response
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{licenseid}/delete:
    delete:
      description: Deletes an existing file in the store.
      operationId: deleteFile
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: name
          in: query
          description: the name of the file
          required: true
          type: string
        - name: prefix
          in: query
          description: the prefix/folder the files resides in
          required: false
          type: string
          default: "/"
      responses:
        204:
          description: file deleted
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{licenseid}/download:
    get:
      description: Download a file from the store
      operationId: downloadFile
      produces: ['application/octet-stream']
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Files
      parameters:
        - name: licenseid
          in: path
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: filepath
          in: query
          description: The name and prefix of the file combined (e.g. /in/010203/test.dat)
          required: true
          type: string
          default: none
      responses:
        200:
          description: The file download
          schema:
            type: file
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scanners:
    get:
      description: |
        Returns all scanners registered for this license id.
      operationId: findScanners
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Scanners
      parameters:
        - name: licenseid
          in: query
          description: BOXwise Pro licenseid to filter on
          required: true
          type: string
          default: none
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
        - name: pagecursor
          in: query
          description: the next page starting from cursor
          required: false
          type: string
      responses:
        200:
          description: scanner response
          schema:
            $ref: '#/definitions/Scanners'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new scanner in the store. Duplicates are not allowed. The serial number is checked against all other serial numbers registered regardless under which licenseid they are registered.
      operationId: addScanner
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Scanners
      parameters:
        - name: scanner
          in: body
          description: Scanner to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewScanner'
      responses:
        200:
          description: scanner response
          schema:
            $ref: '#/definitions/Scanner'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scanners/{serialno}:
    get:
      description: Returns a scanner based on the serial number.
      operationId: getScannerBySerialNo
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Scanners
      parameters:
        - name: serialno
          in: path
          description: Serial number of scanner to fetch
          required: true
          type: string
      responses:
        200:
          description: scanner response
          schema:
            $ref: '#/definitions/Scanner'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Deletes a single scanner based on the serial number supplied.
      operationId: deleteScanner
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - Scanners
      parameters:
        - name: serialno
          in: path
          description: Serial number of scanner to fetch
          required: true
          type: string
      responses:
        204:
          description: scanner deleted
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /appversions:
    get:
      description: Returns all Offline Scanner application versions (.hex files).
      operationId: findAppVersions
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - AppVersions
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: 30
        - name: pagecursor
          in: query
          description: the next page starting from cursor
          required: false
          type: string
      responses:
        200:
          description: app versions response
          schema:
            $ref: '#/definitions/AppVersions'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Upload a new App Version
      operationId: uploadVersion
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      tags:
        - AppVersions
      parameters:
        - name: version
          in: formData
          description: Version Number
          required: true
          type: string
        - name: description
          in: formData
          description: The description of the version
          required: true
          type: string
        - name: file
          in: formData
          description: The uploaded file data (.hex file)
          required: true
          type: file
        - name: filename
          in: formData
          description: The name of the file
          required: true
          type: string
        - name: dbspec
          in: formData
          description: The database/file specs belonging to this version in JSON format.
          required: true
          type: file
        - name: overwrite
          in: formData
          description: Overwriteif exists
          required: true
          type: boolean
          default: true
      responses:
        200:
          description: Version uploaded response
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /appversions/{version}:
    delete:
      description: Deletes a version from the Store and Bucket.
      operationId: deleteAppVersion
      tags:
        - AppVersions
      parameters:
        - name: version
          in: path
          description: App Version to delete
          required: true
          type: string
      responses:
        204:
          description: version deleted
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /appversions/{version}/dbspec:
    get:
      description: Get the dbspec for the specified version
      operationId: getDbSpecOfVersion
      security:
        - ApiKeyAuthorization: []
          LicenseKeySecretAuthorization: []
      tags:
        - AppVersions
      parameters:
        - name: version
          in: path
          description: App Version
          required: true
          type: string
      responses:
        200:
          description: The DbSpec result
          schema:
            $ref: '#/definitions/DbSpecResult'
        400:
          description: Bad Request/Validation error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  PagedResult:
    properties:
      nextcursor:
        type: string
  Licenses:
    allOf:
      - $ref: '#/definitions/PagedResult'
      - type: object
        properties:
          result:
            type: array
            items:
              $ref: '#/definitions/License'
    example:
      nextcursor: kwqjhekjeekwq32u4hfgde==
      result: 
        - name: "Customer X"
          licenseid: 112
          key: 324764278
          isAuthorized: false
          timeCreated: "1985-04-12T23:20:50.52Z"
        - name: "Customer Y"
          licenseid: 113
          isAuthorized: false
          key: 32474344278
          timeCreated: "1985-04-12T23:20:50.52Z"
  License:
    required:
      - key
      - licenseid
      - name
    properties:
      key:
        type: string
      licenseid:
        type: string
      name:
        type: string
      isAuthorized:
        type: boolean
      timeCreated:
        type: string
        format: date-time
    example:
      key: -3422423532
      licenseid: 122
      name: "Customer X"
      isAuthorized: false
      timeCreated: "1985-04-12T23:20:50.52Z"
  LicenseWithSecret:
    allOf:
      - $ref: '#/definitions/License'
      - type: object
        properties:
          apiKey:
            type: string
    required:
      - key
      - apiKey
    example:
      key: 122
      licenseid: 122
      name: "Customer X"
      apiKey: "dkjd238o7rgkjbdewqjkqrewjkhrekujg"
      isAuthorized: false
      timeCreated: "1985-04-12T23:20:50.52Z"
  NewLicense:
    required:
      - licenseid
      - name
      - secret
    properties:
      licenseid:
        type: string
      secret:
        type: string
      name:
        type: string
    example:
      licenseid: "122"
      name: "Customer X"
      secret: "secret"
  Scanners:
    allOf:
      - $ref: '#/definitions/PagedResult'
      - type: object
        properties:
          result:
            type: array
            items:
              $ref: '#/definitions/Scanner'
    example:
      nextcursor: kwqjhewekjeekwq32u4hfgde==
      result: 
        - key: "-27823678462"
          licenseid: "122"
          serialno: "263563"
          name: "Scanner Nr 5 - Bovenij"
          timeCreated: "1985-04-12T23:20:50.52Z"
        - key: "-27823678462"
          licenseid: "122"
          serialno: "263564"
          name: "Scanner Nr 6 - Bovenij"
          timeCreated: "1985-04-12T23:20:50.52Z"
  Scanner:
    allOf:
      - $ref: '#/definitions/NewScanner'
      - type: object
        properties:
          key:
            type: string
          timeCreated:
            type: string
            format: date-time
    required  :
      - key
    example:
      key: "-27823678462"
      licenseid: "122"
      serialno: "263563"
      name: "Scanner Nr 5 - Bovenij"
      timeCreated: "1985-04-12T23:20:50.52Z"
  NewScanner:
    required:
      - licenseid
      - serialno
      - name
    properties:
      licenseid:
        type: string
      serialno:
        type: string
      name:
        type: string
    example:
      licenseid: "122"
      serialno: "263563"
      name: "Scanner Nr 5 - Bovenij"
  SetLicenseAppversion:
    required:
      - version
    properties:
      version:
        type: string
    example:
      version: "0.1.1"
  AppVersion:
    required:
      - version
    properties:
      version:
        type: string
      description:
        type: string
      filename:
        type: string
      dbspec:
        type: string
      timeCreated:
        type: string
        format: date-time
    example:
      version: "0.1.0"
      description: "Version 0.1.0 - Eerste versie (alleen Bestellen menu)"
      filename: "0.1.1.hex"
      dbspec: "0.1.1.hex.debspec.json"
      timeCreated: "1985-04-12T23:20:50.52Z"
  LicenseAppVersion:
    allOf:
      - $ref: '#/definitions/AppVersion'
    example:
      version: "0.1.0"
      description: "Version 0.1.0 - Eerste versie (alleen Bestellen menu)"
      timeCreated: "1985-04-12T23:20:50.52Z"
  AppVersions:
    allOf:
      - $ref: '#/definitions/PagedResult'
      - type: object
        properties:
          result:
            type: array
            items:
              $ref: '#/definitions/AppVersion'
    example:
      nextcursor: kwqjhekjeejhv6kwq32u4hfgde==
      result: 
        - version: "0.1.0"
          description: "Version 0.1.0 - Eerste versie (alleen Bestellen menu)"
          timeCreated: "1985-04-12T23:20:50.52Z"
        - version: "0.1.1"
          description: "Version 0.1.1 - jhgjhg"
          timeCreated: "1985-04-12T23:20:50.52Z"
  DbSpecResult:
    required:
      - version
      - specJson
    properties:
      version:
        type: string
      specJson:
        type: string
    example:
      version: "0.1.0"
      specJson: "{\"test\":\"test\", \"test2\":[]}"
  Files:
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/File'
    example:
      result: 
        - name: "meta.dat"
          size: 115
          timeCreated: "1985-04-12T23:20:50.52Z"
        - name: "prodidx.dat"
          size: 3343
          timeCreated: "1985-04-12T23:20:50.52Z"
          updated: "1985-04-12T23:20:50.52Z"
  File:
    required:
      - name
      - size
    properties:
      name:
        type: string
      size:
        type: integer
        format: int64
      timeCreated:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
    example:
      name: "meta.dat"
      size: 115
      timeCreated: "1985-04-12T23:20:50.52Z"
      updated: "1985-04-12T23:20:50.52Z"
  Error:
    required:
      - statusCode
      - error
    properties:
      statusCode:
        type: integer
        format: int32
      error:
        type: string
      message:
        type: string
    example:
      statusCode: 500
      error: "Internal Server Erorr"
      message: "An unhandled Internal Server Erorr occurred"